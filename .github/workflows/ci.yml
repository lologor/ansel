name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Keep in sync with manualrun.yml!

on:
  push:
    branches:
      - master
      - dev
      - candidate
    paths-ignore:
        - "po/**"
        - "packaging/**"
        - "data/latex/**"
        - "data/lua/**"
        - "data/pixmaps/**"
        - "data/pswp/**"
        - "data/style/**"
        - "data/themes/**"
        - "data/watermarks/**"
        - "**.md"
        - "**.yml"
  pull_request:
    branches:
      - master
    paths-ignore:
        - "po/**"
        - "packaging/**"
        - "data/latex/**"
        - "data/lua/**"
        - "data/pixmaps/**"
        - "data/pswp/**"
        - "data/style/**"
        - "data/themes/**"
        - "data/watermarks/**"
        - "**.md"
  workflow_dispatch:


permissions:
  contents: read

jobs:
  Linux:
    name: Linux.${{ matrix.os.code }}.${{ matrix.compiler.compiler }}.${{ matrix.target }}.${{ matrix.btype }}.${{ matrix.generator }}
    runs-on: ${{ matrix.os.label }}
    strategy:
      fail-fast: true
      matrix:
        os:
          - { label: ubuntu-22.04, code: jammy }
        compiler:
          - { compiler: GNU13,  CC: gcc-13,   CXX: g++-13,     packages: gcc-13 g++-13 }
          - { compiler: LLVM15, CC: clang-15, CXX: clang++-15, packages: clang-15 libomp-15-dev llvm-15-dev libc++-15-dev libc++abi1-15 lld-15 clang-tools-15 mlir-15-tools libmlir-15-dev}
        btype:
          - Debug
          - Release
        target:
          - skiptest
          - nofeatures
        generator:
          - Ninja
    env:
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
      DARKTABLE_CLI: ${{ github.workspace }}/install/bin/ansel-cli
    steps:
      - name: Install compiler ${{ matrix.compiler.compiler }}
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo add-apt-repository -y universe
          sudo add-apt-repository -y multiverse
          sudo apt-get update
          sudo apt-get -y install \
            ${{ matrix.compiler.packages }}
      - name: Install Base Dependencies
        run: |
          sudo apt-get -y install \
            build-essential \
            appstream-util \
            desktop-file-utils \
            gettext \
            git \
            gdb \
            intltool \
            libatk1.0-dev \
            libcairo2-dev \
            libcolord-dev \
            libcolord-gtk-dev \
            libcmocka-dev \
            libcups2-dev \
            libcurl4-gnutls-dev \
            libexiv2-dev \
            libgdk-pixbuf2.0-dev \
            libglib2.0-dev \
            libgraphicsmagick1-dev \
            libgtk-3-dev \
            libheif-dev \
            libjpeg-dev \
            libjson-glib-dev \
            liblcms2-dev \
            liblensfun-dev \
            liblua5.3-dev \
            libopenexr-dev \
            libopenjp2-7-dev \
            libosmgpsmap-1.0-dev \
            libpango1.0-dev \
            libpng-dev \
            libportmidi-dev \
            libpugixml-dev \
            librsvg2-dev \
            libsaxon-java \
            libsecret-1-dev \
            libsoup2.4-dev \
            libsqlite3-dev \
            libtiff5-dev \
            libwebp-dev \
            libx11-dev \
            libxml2-dev \
            libxml2-utils \
            ninja-build \
            perl \
            po4a \
            python3-jsonschema \
            xsltproc \
            zlib1g-dev;
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/ansel --version || true
          ${INSTALL_PREFIX}/bin/ansel-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
      - name: Run Integration test suite
        #integration test can get "stuck" plus there are couple of errors here, so it needs to be addressed first
        if: ${{ false }}
        run: |
          cd "${SRC_DIR}/src/tests/integration/"
          ./run.sh --no-opencl --no-deltae --fast-fail

  Win64:
    name: Win64.${{ matrix.msystem }}.${{ matrix.target }}.${{ matrix.btype }}.${{ matrix.generator }}
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        btype:
          - Debug
          - Release
        eco: [-DUSE_XMLLINT=OFF]
        target:
          - skiptest
          - nofeatures
        generator:
          - Ninja
        msystem:
          - UCRT64
    defaults:
      run:
        shell: msys2 {0}
    env:
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      ECO: ${{ matrix.eco }}
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      TARGET: ${{ matrix.target }}
      GENERATOR: ${{ matrix.generator }}
      # todo: use linker which supports --wrap, ld.bfd and ld.gold support it
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: >-
            git
            intltool
            po4a
          pacboy: >-
            cc:p
            cmake:p
            cmocka:p
            curl:p
            ninja:p
            nsis:p
            dbus-glib:p
            drmingw:p
            exiv2:p
            gcc-libs:p
            gettext:p
            gmic:p
            graphicsmagick:p
            gtk3:p
            icu:p
            imath:p
            iso-codes:p
            lcms2:p
            lensfun:p
            libavif:p
            libexif:p
            libheif:p
            libjpeg-turbo:p
            libjxl:p
            librsvg:p
            libsecret:p
            libsoup:p
            libwebp:p
            libtiff:p
            libwebp:p
            libxml2:p
            libxslt:p
            lua:p
            omp:p
            openexr:p
            openjpeg2:p
            osm-gps-map:p
            portmidi:p
            pugixml:p
            python:p
            python-jsonschema:p
            python-setuptools:p
            python-six:p
            sqlite3:p
            zlib:p
          update: true
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
      - name: Build and Install
        run: |
          cmake -E make_directory "${BUILD_DIR}"
          cmake -E make_directory "${INSTALL_PREFIX}"
          $(cygpath ${SRC_DIR})/.ci/ci-script.sh
      - name: Check if it runs
        run: |
          $(cygpath ${INSTALL_PREFIX})/bin/ansel.exe --version || true
          $(cygpath ${INSTALL_PREFIX})/bin/ansel-cli.exe --version || true
          echo "Testing RUN!"
          $(cygpath ${INSTALL_PREFIX})/bin/ansel-cli.exe \
                 --verbose \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 $(cygpath ${SRC_DIR})/src/tests/integration/images/mire1.cr2 \
                 $(cygpath ${SRC_DIR})/src/tests/integration/0000-nop/nop.xmp \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0

  macOS:
    if: ${{ false }}
    name: macOS.${{ matrix.compiler.compiler }}.${{ matrix.build.xcode }}.${{ matrix.target }}.${{ matrix.btype }}.${{ matrix.generator }}
    runs-on: ${{ matrix.build.os }}
    strategy:
      fail-fast: true
      matrix:
        build:
          - { os: macos-12,    xcode: 14.2,   deployment: 12.5 } # LLVM14
        compiler:
          - { compiler: XCode,   CC: cc, CXX: c++ }
        btype:
          - Debug
          - Release
        target:
          - skiptest
        generator:
          - Ninja
        eco: [-DDONT_USE_INTERNAL_LIBRAW=ON]
    env:
      DEVELOPER_DIR: /Applications/Xcode_${{ matrix.build.xcode }}.app/Contents/Developer
      CC: ${{ matrix.compiler.CC }}
      CXX: ${{ matrix.compiler.CXX }}
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.build.deployment }}
      SRC_DIR: ${{ github.workspace }}/src
      BUILD_DIR: ${{ github.workspace }}/build
      INSTALL_PREFIX: ${{ github.workspace }}/install
      ECO: ${{ matrix.eco }}
      CMAKE_BUILD_TYPE: ${{ matrix.btype }}
      GENERATOR: ${{ matrix.generator }}
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          path: src
      - name: Install Base Dependencies
        run: |
          brew update > /dev/null || true
          brew tap Homebrew/bundle
          cd src/.ci
          export HOMEBREW_NO_INSTALL_UPGRADE=1
          brew bundle --verbose || true
          # handle keg-only libs
          brew link --force libomp
          brew link --force libsoup@2
      - name: Build and Install
          # todo: use linker which supports --wrap, ld.bfd and ld.gold support it
        run: |
          cmake -E make_directory "${BUILD_DIR}";
          cmake -E make_directory "${INSTALL_PREFIX}";
          ./src/.ci/ci-script.sh;
      - name: Check if it runs
        run: |
          ${INSTALL_PREFIX}/bin/ansel --version || true
          ${INSTALL_PREFIX}/bin/ansel-cli \
                 --width 2048 --height 2048 \
                 --hq true --apply-custom-presets false \
                 "${SRC_DIR}/src/tests/integration/images/mire1.cr2" \
                 "${SRC_DIR}/src/tests/integration/0000-nop/nop.xmp" \
                 output.png \
                 --core --disable-opencl --conf host_memory_limit=8192 \
                 --conf worker_threads=4 -t 4 \
                 --conf plugins/lighttable/export/force_lcms2=FALSE \
                 --conf plugins/lighttable/export/iccintent=0
